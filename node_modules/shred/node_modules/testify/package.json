{
  "name": "testify",
  "version": "0.1.0",
  "description": "simple asynchronous testing using assertions of your choice",
  "main": "testify.coffee",
  "files": [
    "testify.coffee"
  ],
  "dependencies": {
    "colors": "0.6.x"
  },
  "repository": "",
  "author": "",
  "license": "MIT",
  "readme": "# Testify\n\nSimple, asynchronous testing, using the assertions of your choice.\n\nWritten in CoffeeScript; will start compiling to JS at some point soon.\n\n\n## Nested testing\n\ntbw\n\n## Basic usage\n\n```coffee\n\nTestify.test \"a suite of tests\", (context) ->\n  # When you need to test the results of an asynchronous function,\n  # give context.test() a function that takes an argument.  You can\n  # then use that argument as a new context for nesting tests.\n  context.test \"testing something asynchronous\", (context) ->\n    async_call (error, result1) ->\n      # If you give context.test() a function that takes no arguments,\n      # the test is assumed to be synchronous, and considered to have\n      # passed if the function runs without throwing an error.\n      context.test \"result makes me happy\", ->\n        assert.ifError(error)\n        assert.equal(result1, \"pie\")\n\n      context.test \"a nested asynchronous test\", (context) ->\n        another_async_call result1,  (error, result2) ->\n          context.test \"result makes me deeply happy\", ->\n            assert.ifError(error)\n            assert.deepEqual result2, [\"bacon\", \"cheese\", \"pie\"]\n\n      context.test \"shortcut for passing an async test\", (context) ->\n        process.nextTick ->\n          # you can call context.pass() instead of using a synchronous test\n          context.pass()\n\n```\n\n",
  "readmeFilename": "README.md",
  "_id": "testify@0.1.0",
  "dist": {
    "shasum": "4104eb42f1e021499d421852a8cd61f1487a0c41"
  },
  "_from": "testify@0.1.0",
  "_resolved": "https://registry.npmjs.org/testify/-/testify-0.1.0.tgz"
}
